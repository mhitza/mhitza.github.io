#!/usr/bin/env stack
-- stack runghc --package directory --package http-client --package http-client-tls --package aeson --package utf8-string
-- vim: set syntax=haskell :
{-# LANGUAGE OverloadedStrings #-}
import System.Environment
import System.Exit

import System.IO
import System.IO.Error
import System.Directory

import Control.Monad (filterM, mapM)
import Data.List (intercalate)

import Network.HTTP.Client
import Network.HTTP.Client.TLS

import Data.Aeson
import qualified Data.Text as Text
import qualified Data.ByteString.UTF8 as ByteString

terminateWith message code = do
  putStrLn message
  exitWith (ExitFailure code)

getDirectoryArgument f = do
  args <- getArgs
  if length args /= 2
    then terminateWith "first argument must be a directory name, second argument a GitHub token" 2
    else f (head args)

ioMaybe f = catchIOError (fmap Just f) (\io_error -> return Nothing)

filesWithContents f dir = do
  maybe_items <- ioMaybe (listDirectory dir)
  case maybe_items of
    Nothing    -> terminateWith ("could not read directory " ++ dir) 3
    Just items -> do
      let fullpath = (\filename -> dir <> "/" <> filename)
      files <- filterM (doesFileExist . fullpath) items
      if null files
        then terminateWith ("no files in directory " ++ dir) 4
        else do
          contents <- mapM (ioMaybe . readFile . fullpath) files
          f (zip files contents)

encodeFilesSection = object . map encoder
  where encoder (name, Just content) = (Text.pack name) .= object [ "content" .= (Text.pack content) ]
        encoder (name, Nothing)      = error $ name ++ " has no content"

main = getDirectoryArgument . filesWithContents $ \files ->
  let filesNotRead = filter ((== Nothing) . snd) files
  in if not (null filesNotRead)
    then terminateWith ("could not read files: " ++ (intercalate ", " (map fst filesNotRead))) 5
    else do
      let create_gist = object
            [ "files" .= encodeFilesSection files
            , "description" .= (Text.pack "lorem ipsum")
            , "public" .= True ]

      manager <- newManager tlsManagerSettings
      initialRequest <- parseRequest "https://api.github.com/gists"

      args <- getArgs

      let request = initialRequest
            { method = "POST"
            , requestBody = RequestBodyLBS $ encode create_gist
            , requestHeaders = [ ("Authorization", "Bearer " <> ByteString.fromString (args !! 1))
                               , ("User-Agent", "Gister") ]}

      maybe_responseJSON <- fmap (decode . responseBody) $ httpLbs request manager
      case maybe_responseJSON of Nothing        -> terminateWith ("could not parse response") 6
                                 Just (GAR url) -> putStrLn (Text.unpack url)


data GistAPIResponse = GAR Text.Text deriving Show

instance FromJSON GistAPIResponse where
  parseJSON = withObject "GAR" $ \obj -> do
    html_url <- obj .: "html_url"
    return $ GAR html_url
