<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>personal code attic</title>
<subtitle>technical problems, programming examples, quirks of running a Linux system</subtitle>
<link href="https://mhitza.github.io/atom.xml" rel="self" />
<link href="https://mhitza.github.io" />
<id>tag:mhitza.github.io,2000-01-01:/index</id>
<updated>2021-02-14T18:12:12Z</updated>
<author><name>Marius Ghita</name>
</author>
<entry><title>vim + GNU Guile development environment</title>
<link href="https://gist.github.com/a00d7900571e9f13bac2bbf4a203d21b" />
<summary>When following getting started guides for Lisp/Scheme languages, most of the resources I find tend to prefer EMACS instead of vim. Understandable, considering the *almost* built-in development environment you get with EMACS.  However, this is my attempt at trying to create a simple to configure and use scheme development environment using vim.</summary>
<id>tag:mhitza.github.io,2021-02-13:/</id>
<updated>2021-02-13T00:00:00Z</updated>
</entry>
<entry><title>Using Vimwiki like a standard desktop application</title>
<link href="https://gist.github.com/74bedf5de1b3ace84d02bb634128193e" />
<summary>When taking notes I prefer to launch the note-taking application, write a few lines and close the application. Having used Vimwiki for the last few days, I had to create a desktop entry wrapper around it, just to avoid the &quot;Open Terminal first&quot;, step.</summary>
<id>tag:mhitza.github.io,2020-06-19:/</id>
<updated>2020-06-19T00:00:00Z</updated>
</entry>
<entry><title>Faster Ansible playbook iteration with tags and Vagrant snapshots</title>
<link href="https://gist.github.com/5f3be54ac59d7f0652bd9b803b79f70c" />
<summary>In the last few months, I had to write multiple Ansible playbooks, to the point that the slow write/test cycle became a major annoyance. What seemed to work well for me was a mix between Ansible tags and Vagrant snapshots.</summary>
<id>tag:mhitza.github.io,2020-05-07:/</id>
<updated>2020-05-07T00:00:00Z</updated>
</entry>
<entry><title>Prolong keyboard backlight timeout</title>
<link href="https://gist.github.com/mhitza/c454f5d8a30edb122f56bc67ffb386be" />
<summary>Frustrated by some weird default keyboard backlight timeout on your laptop under Linux? I know how you feel, had the same frustration with my Dell laptop until I found a workaround.</summary>
<id>tag:mhitza.github.io,2018-11-22:/</id>
<updated>2018-11-22T00:00:00Z</updated>
</entry>
<entry><title>LVM snapshots</title>
<link href="https://gist.github.com/mhitza/15a56a20ac80b456cda6" />
<summary>A great feature to use when experimenting with different system setups. I no longer have to worry about polluting my system with extra packages when I want to test a new desktop environment, or a new driver version, or even a botched system installation. With LVM I can just snapshot a working system and restore just as easily if something goes wrong.</summary>
<id>tag:mhitza.github.io,2016-03-24:/</id>
<updated>2016-03-24T00:00:00Z</updated>
</entry>
<entry><title>Programming Arduino Uno (ATmega386P) in assembly</title>
<link href="https://gist.github.com/mhitza/8a4608f4dfdec20d3879" />
<summary>After reading various sources on the topic I&#39;ve written a few notes, and a sample project, to illustrate a working setup for the task. Also tried to go a little more in depth in certain parts, to clear up some confusion I&#39;ve dealt with when researching the topic.</summary>
<id>tag:mhitza.github.io,2015-10-21:/</id>
<updated>2015-10-21T00:00:00Z</updated>
</entry>
<entry><title>How to connect your PSP on Linux</title>
<link href="https://gist.github.com/mhitza/81651f49b3a43e6f4554" />
<summary>A few common debugging steps you can try if it doesn&#39;t get automounted like it normally should.</summary>
<id>tag:mhitza.github.io,2015-10-09:/</id>
<updated>2015-10-09T00:00:00Z</updated>
</entry>
<entry><title>Sculpin for Github pages</title>
<link href="https://gist.github.com/mhitza/189cdecacb93ecd83f29" />
<summary>A simple repository setup that I&#39;ve used in the past for static blog publishing via Sculpin. The model is inspired by the way Octopress does it&#39;s repository setup.</summary>
<id>tag:mhitza.github.io,2015-10-08:/</id>
<updated>2015-10-08T00:00:00Z</updated>
</entry>
</feed>
