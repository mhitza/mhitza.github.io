<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="/atom.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>personal code attic</title>
  <subtitle>technical problems, programming examples, quirks of running a Linux system</subtitle>
  <link href="https://mhitza.github.io/atom.xml" rel="self" />
  <link href="https://mhitza.github.io" />
  <id>tag:mhitza.github.io,2000-01-01:/index</id>
  <updated>2024-08-25T17:51:50Z</updated>
  <author>
    <name>Marius Ghi»õa</name>
  </author>
  <entry>
    <title>Tweaking desktop mode on the Steam Deck</title>
    <link href="https://gist.github.com/mhitza/ddfe3b52ce529039a89747afb8b11e44"/>
    <summary>The Steam Deck is a great piece of techonolgy, and very versatile thanks to the fact that its easy to switch to desktop mode. However the default configuration is rather limited, and there are a set of customizations I had to apply to make it fit my workflows.</summary>
    <id>tag:mhitza.github.io,2024-08-25:/</id>
    <updated>2024-08-25T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Two lines of shell script in 4 hours of custom Ansible module development</title>
    <link href="https://gist.github.com/mhitza/b6eb99314b45444e531ead74aa9ec406"/>
    <summary></summary>
    <id>tag:mhitza.github.io,2023-08-20:/</id>
    <updated>2023-08-20T00:00:00Z</updated>
  </entry>
  <entry>
    <title>CentOS 8 Stream on your favorite cloud provider</title>
    <link href="https://gist.github.com/8e859a36f9325f605d27d58cdc446291"/>
    <summary>I think we're all enthusiastic about the scheduled release of Rocky Linux on the 31st of March. At the same time, I think this is also a good moment to give CentOS 8 Stream a quick test drive with the software we develop and maintain. Just a plan B. Some cloud providers don't yet have Stream images, so I wrote a cloud-init configuration to convert any CentOS 8 distro to CentOS 8 Stream.</summary>
    <id>tag:mhitza.github.io,2021-03-04:/</id>
    <updated>2021-03-04T00:00:00Z</updated>
  </entry>
  <entry>
    <title>vim + GNU Guile development environment</title>
    <link href="https://gist.github.com/a00d7900571e9f13bac2bbf4a203d21b"/>
    <summary>When following getting started guides for Lisp/Scheme languages, most of the resources I find tend to prefer EMACS instead of vim. Understandable, considering the *almost* built-in development environment you get with EMACS.  This is my attempt at trying to setup, and use, a scheme development environment using vim.</summary>
    <id>tag:mhitza.github.io,2021-02-13:/</id>
    <updated>2021-02-13T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Using Vimwiki like a standard desktop application</title>
    <link href="https://gist.github.com/74bedf5de1b3ace84d02bb634128193e"/>
    <summary>When taking notes I prefer to launch a note-taking application, write a line, or two, then close the application. Having used Vimwiki for a couple of days, I had to create a desktop entry wrapper around it, just to avoid the "Open Terminal first", step.</summary>
    <id>tag:mhitza.github.io,2020-06-19:/</id>
    <updated>2020-06-19T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Faster Ansible playbook iteration with tags and Vagrant snapshots</title>
    <link href="https://gist.github.com/5f3be54ac59d7f0652bd9b803b79f70c"/>
    <summary>Last couple of months, I had to write a large amount of Ansible playbooks, to the point that the slow write/test cycle became a major annoyance. What seemed to work well for me was a mix between Ansible tags and Vagrant snapshots.</summary>
    <id>tag:mhitza.github.io,2020-05-07:/</id>
    <updated>2020-05-07T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Prolong keyboard backlight timeout</title>
    <link href="https://gist.github.com/mhitza/c454f5d8a30edb122f56bc67ffb386be"/>
    <summary>Frustrated by some weird default keyboard backlight timeout on your laptop under Linux? I know how you feel, had the same frustration with my Dell laptop until I found a workaround.</summary>
    <id>tag:mhitza.github.io,2018-11-22:/</id>
    <updated>2018-11-22T00:00:00Z</updated>
  </entry>
  <entry>
    <title>LVM snapshots</title>
    <link href="https://gist.github.com/mhitza/15a56a20ac80b456cda6"/>
    <summary>A great feature to use when experimenting with different system setups. I no longer have to worry about polluting my system with extra packages when I want to test a new desktop environment, or a new driver version, or even a botched system installation. With LVM I can snapshot a working system and restore it if something goes wrong.</summary>
    <id>tag:mhitza.github.io,2016-03-24:/</id>
    <updated>2016-03-24T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Programming Arduino Uno (ATmega386P) in assembly</title>
    <link href="https://gist.github.com/mhitza/8a4608f4dfdec20d3879"/>
    <summary>After reading various sources on the topic I've written notes, and a sample project, to illustrate a working setup for the task. Also tried to go a little more in depth in certain parts, to clear up some confusion I've dealt with when researching the topic.</summary>
    <id>tag:mhitza.github.io,2015-10-21:/</id>
    <updated>2015-10-21T00:00:00Z</updated>
  </entry>
  <entry>
    <title>How to connect your PSP on Linux</title>
    <link href="https://gist.github.com/mhitza/81651f49b3a43e6f4554"/>
    <summary>Common debugging steps you can try if it doesn't get automounted like it should.</summary>
    <id>tag:mhitza.github.io,2015-10-09:/</id>
    <updated>2015-10-09T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Sculpin for Github pages</title>
    <link href="https://gist.github.com/mhitza/189cdecacb93ecd83f29"/>
    <summary>Repository setup that I've used in the past for static blog publishing via Sculpin. Model inspired by Octopress in it's repository setup.</summary>
    <id>tag:mhitza.github.io,2015-10-08:/</id>
    <updated>2015-10-08T00:00:00Z</updated>
  </entry>
</feed>
